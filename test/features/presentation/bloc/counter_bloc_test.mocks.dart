// Mocks generated by Mockito 5.4.5 from annotations
// in practice_app/test/features/presentation/bloc/counter_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:practice_app/core/error/failures.dart' as _i6;
import 'package:practice_app/core/usecase/usecase.dart' as _i8;
import 'package:practice_app/features/counter/domain/entities/counter.dart'
    as _i7;
import 'package:practice_app/features/counter/domain/repositories/counter_repository.dart'
    as _i2;
import 'package:practice_app/features/counter/domain/usecases/get_counter.dart'
    as _i4;
import 'package:practice_app/features/counter/domain/usecases/increment_counter.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCounterRepository_0 extends _i1.SmartFake
    implements _i2.CounterRepository {
  _FakeCounterRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCounter extends _i1.Mock implements _i4.GetCounter {
  MockGetCounter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CounterRepository get counterRepository =>
      (super.noSuchMethod(
            Invocation.getter(#counterRepository),
            returnValue: _FakeCounterRepository_0(
              this,
              Invocation.getter(#counterRepository),
            ),
          )
          as _i2.CounterRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>> call(_i8.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>>.value(
              _FakeEither_1<_i6.Failure, _i7.Counter>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>>);
}

/// A class which mocks [IncrementCounter].
///
/// See the documentation for Mockito's code generation for more information.
class MockIncrementCounter extends _i1.Mock implements _i9.IncrementCounter {
  MockIncrementCounter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CounterRepository get counterRepository =>
      (super.noSuchMethod(
            Invocation.getter(#counterRepository),
            returnValue: _FakeCounterRepository_0(
              this,
              Invocation.getter(#counterRepository),
            ),
          )
          as _i2.CounterRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>> call(_i9.Params? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>>.value(
              _FakeEither_1<_i6.Failure, _i7.Counter>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Counter>>);
}
